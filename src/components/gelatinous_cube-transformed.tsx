/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/fang/GitHub/GLTFCharacterControl/public/gelatinous_cube-transformed.glb -o /Users/fang/GitHub/GLTFCharacterControl/public/gelatinous_cube-transformed.tsx --types 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    cube1: THREE.Mesh
    cube2: THREE.Mesh
    bubbles: THREE.Mesh
    arrows: THREE.Mesh
    skeleton_1: THREE.Mesh
    skeleton_2: THREE.Mesh
  }
  materials: {
    cube_mat: THREE.MeshStandardMaterial
    cube_bubbles_mat: THREE.MeshStandardMaterial
    weapons_mat: THREE.MeshStandardMaterial
    skele_mat: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/gelatinous_cube-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[-0.556, 0.382, -0.111]}>
        <mesh geometry={nodes.arrows.geometry} material={materials.weapons_mat} />
        <mesh geometry={nodes.skeleton_1.geometry} material={materials.skele_mat} />
        <mesh geometry={nodes.skeleton_2.geometry} material={materials.weapons_mat} />
      </group>
      <mesh geometry={nodes.cube1.geometry} material={materials.cube_mat} position={[-0.556, 0.382, -0.111]} />
      <mesh geometry={nodes.cube2.geometry} material={materials.cube_mat} position={[-0.556, 0.382, -0.111]} />
      <mesh geometry={nodes.bubbles.geometry} material={materials.cube_bubbles_mat} position={[-0.556, 0.382, -0.111]} />
    </group>
  )
}

useGLTF.preload('/gelatinous_cube-transformed.glb')
