/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/W5_LOD2.glb -t 
Made generic by foundway. Assuming only one mesh and one bone.
*/

import * as THREE from 'three'
import React, { JSX, useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { useAnimationStore } from '../store/useAnimationStore'

type GLTFResult = GLTF & {
  nodes: Record<string, THREE.SkinnedMesh | THREE.Bone>
  materials: Record<string, THREE.MeshStandardMaterial>
  animations: THREE.AnimationClip[]
}

export const Character = (props: JSX.IntrinsicElements['group']) => {  
  const { scene, animations } = useGLTF('W5_LOD2.glb')
  const group = React.useRef<THREE.Group>(null)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  const { actions } = useAnimations(animations, group)
  const { currentAnimation } = useAnimationStore()

  useEffect(() => {
    actions[currentAnimation]?.reset().fadeIn(0.5).play()
    return () => {
      actions[currentAnimation]?.fadeOut(0.5)
    }
  }, [currentAnimation])

  // Find the skinned mesh and root bone from the nodes array
  const mesh = Object.values(nodes).find(node => node instanceof THREE.SkinnedMesh) as THREE.SkinnedMesh
  const root = Object.values(nodes).find(node => node instanceof THREE.Bone) as THREE.Bone

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={root} />
      <skinnedMesh
        geometry={mesh.geometry} 
        material={Object.values(materials)[0]} 
        skeleton={mesh.skeleton} 
        morphTargetDictionary={mesh.morphTargetDictionary}
        morphTargetInfluences={mesh.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('W5_LOD2.glb')

